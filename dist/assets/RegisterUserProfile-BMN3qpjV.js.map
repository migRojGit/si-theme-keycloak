{"version":3,"file":"RegisterUserProfile-BMN3qpjV.js","sources":["../../src/keycloak-theme/login/pages/shared/UserProfileFormFields.tsx","../../src/keycloak-theme/login/pages/RegisterUserProfile.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\r\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\r\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\r\nimport type { I18n } from \"../../i18n\";\r\n\r\nexport type UserProfileFormFieldsProps = {\r\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\r\n    i18n: I18n;\r\n    getClassName: (classKey: ClassKey) => string;\r\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\r\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\r\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\r\n};\r\n\r\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\r\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\r\n\r\n    const { advancedMsg, msg } = i18n;\r\n\r\n    const {\r\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\r\n        formValidationDispatch,\r\n        attributesWithPassword\r\n    } = useFormValidation({\r\n        kcContext,\r\n        i18n\r\n    });\r\n\r\n    useEffect(() => {\r\n        onIsFormSubmittableValueChange(isFormSubmittable);\r\n    }, [isFormSubmittable]);\r\n\r\n    let currentGroup = \"\";\r\n\r\n    return (\r\n        <>\r\n            {attributesWithPassword.map((attribute, i) => {\r\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\r\n\r\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\r\n\r\n                const formGroupClassName = clsx(\r\n                    getClassName(\"kcFormGroupClass\"),\r\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\r\n                );\r\n\r\n                return (\r\n                    <Fragment key={i}>\r\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\r\n                            <div className={formGroupClassName}>\r\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\r\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\r\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\r\n                                    </label>\r\n                                </div>\r\n                                {groupDisplayDescription !== \"\" && (\r\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\r\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\r\n                                            {advancedMsg(groupDisplayDescription)}\r\n                                        </label>\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n\r\n                        {BeforeField && <BeforeField attribute={attribute} />}\r\n\r\n                        <div className={formGroupClassName}>\r\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\r\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\r\n                                    {advancedMsg(attribute.displayName ?? \"\")}\r\n                                </label>\r\n                                {attribute.required && <>*</>}\r\n                            </div>\r\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\r\n                                {(() => {\r\n                                    const { options } = attribute.validators;\r\n\r\n                                    if (options !== undefined) {\r\n                                        return (\r\n                                            <select\r\n                                                id={attribute.name}\r\n                                                name={attribute.name}\r\n                                                onChange={event =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"update value\",\r\n                                                        \"name\": attribute.name,\r\n                                                        \"newValue\": event.target.value\r\n                                                    })\r\n                                                }\r\n                                                onBlur={() =>\r\n                                                    formValidationDispatch({\r\n                                                        \"action\": \"focus lost\",\r\n                                                        \"name\": attribute.name\r\n                                                    })\r\n                                                }\r\n                                                value={value}\r\n                                            >\r\n                                                <>\r\n                                                    <option value=\"\" selected disabled hidden>\r\n                                                        {msg(\"selectAnOption\")}\r\n                                                    </option>\r\n                                                    {options.options.map(option => (\r\n                                                        <option key={option} value={option}>\r\n                                                            {option}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </>\r\n                                            </select>\r\n                                        );\r\n                                    }\r\n\r\n                                    return (\r\n                                        <input\r\n                                            type={(() => {\r\n                                                switch (attribute.name) {\r\n                                                    case \"password-confirm\":\r\n                                                    case \"password\":\r\n                                                        return \"password\";\r\n                                                    default:\r\n                                                        return \"text\";\r\n                                                }\r\n                                            })()}\r\n                                            id={attribute.name}\r\n                                            name={attribute.name}\r\n                                            value={value}\r\n                                            onChange={event =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"update value\",\r\n                                                    \"name\": attribute.name,\r\n                                                    \"newValue\": event.target.value\r\n                                                })\r\n                                            }\r\n                                            onBlur={() =>\r\n                                                formValidationDispatch({\r\n                                                    \"action\": \"focus lost\",\r\n                                                    \"name\": attribute.name\r\n                                                })\r\n                                            }\r\n                                            className={getClassName(\"kcInputClass\")}\r\n                                            aria-invalid={displayableErrors.length !== 0}\r\n                                            disabled={attribute.readOnly}\r\n                                            autoComplete={attribute.autocomplete}\r\n                                        />\r\n                                    );\r\n                                })()}\r\n                                {displayableErrors.length !== 0 &&\r\n                                    (() => {\r\n                                        const divId = `input-error-${attribute.name}`;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\r\n                                                <span\r\n                                                    id={divId}\r\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\r\n                                                    style={{\r\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\r\n                                                    }}\r\n                                                    aria-live=\"polite\"\r\n                                                >\r\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\r\n                                                </span>\r\n                                            </>\r\n                                        );\r\n                                    })()}\r\n                            </div>\r\n                        </div>\r\n                        {AfterField && <AfterField attribute={attribute} />}\r\n                    </Fragment>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n}","// ejected using 'npx eject-keycloak-page'\r\nimport { useState } from \"react\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\r\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\r\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\r\nimport type { KcContext } from \"../kcContext\";\r\nimport type { I18n } from \"../i18n\";\r\n\r\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\r\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\r\n\r\n    const { getClassName } = useGetClassName({\r\n        doUseDefaultCss,\r\n        classes\r\n    });\r\n\r\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\r\n\r\n    const { msg, msgStr } = i18n;\r\n\r\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\r\n            displayMessage={messagesPerField.exists(\"global\")}\r\n            displayRequiredFields={true}\r\n            headerNode={msg(\"registerTitle\")}\r\n        >\r\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\r\n                <UserProfileFormFields\r\n                    kcContext={kcContext}\r\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\r\n                    i18n={i18n}\r\n                    getClassName={getClassName}\r\n                />\r\n                {recaptchaRequired && (\r\n                    <div className=\"form-group\">\r\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\r\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\r\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\r\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\r\n                            <span>\r\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\r\n                        <input\r\n                            className={clsx(\r\n                                getClassName(\"kcButtonClass\"),\r\n                                getClassName(\"kcButtonPrimaryClass\"),\r\n                                getClassName(\"kcButtonBlockClass\"),\r\n                                getClassName(\"kcButtonLargeClass\")\r\n                            )}\r\n                            type=\"submit\"\r\n                            value={msgStr(\"doRegister\")}\r\n                            disabled={!isFormSubmittable}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </Template>\r\n    );\r\n}\r\n"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useFormValidation","useEffect","currentGroup","jsx","Fragment","attribute","i","group","groupDisplayHeader","groupDisplayDescription","value","displayableErrors","formGroupClassName","clsx","jsxs","options","event","option","divId","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","setIsFormSubmittable","useState"],"mappings":"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"}