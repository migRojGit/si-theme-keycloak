{"version":3,"mappings":"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","names":["useI18n","createUseI18n","confuturoLogoSvgUrl","Template","props","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","showUsernameNode","infoNode","kcContext","i18n","doUseDefaultCss","classes","children","getClassName","useGetClassName","msg","changeLocale","labelBySupportedLanguageTag","currentLanguageTag","realm","locale","auth","url","message","isAppInitiatedAction","showLogin","showSubtitle","isReady","usePrepareTemplate","useEffect","jsxs","jsx","clsx","assert","languageTag","Fragment","Login","lazy","Register","RegisterUserProfile","Terms","MyExtraPage1","MyExtraPage2","Info","__vitePreload","KcApp","Suspense","Fallback"],"sources":["../../src/keycloak-theme/login/i18n.ts","../../src/keycloak-theme/login/assets/img/logo.svg","../../src/keycloak-theme/login/Template.tsx","../../src/keycloak-theme/login/KcApp.tsx"],"sourcesContent":["import { createUseI18n } from \"keycloakify/login\";\r\n\r\nexport const { useI18n } = createUseI18n({\r\n    // NOTE: Here you can override the default i18n messages\r\n    // or define new ones that, for example, you would have\r\n    // defined in the Keycloak admin UI for UserProfile\r\n    // https://user-images.githubusercontent.com/6702424/182050652-522b6fe6-8ee5-49df-aca3-dba2d33f24a5.png\r\n    en: {\r\n        alphanumericalCharsOnly: \"Only alphanumerical characters\",\r\n        gender: \"Gender\",\r\n        // Here we overwrite the default english value for the message \"doForgotPassword\"\r\n        // that is \"Forgot Password?\" see: https://github.com/InseeFrLab/keycloakify/blob/f0ae5ea908e0aa42391af323b6d5e2fd371af851/src/lib/i18n/generated_messages/18.0.1/login/en.ts#L17\r\n        doForgotPassword: \"I forgot my password\",\r\n        invalidUserMessage: \"Invalid username or password. (this message was overwrite in the theme)\"\r\n    },\r\n    fr: {\r\n        /* spell-checker: disable */\r\n        alphanumericalCharsOnly: \"Caractère alphanumérique uniquement\",\r\n        gender: \"Genre\",\r\n        doForgotPassword: \"J'ai oublié mon mot de passe\",\r\n        invalidUserMessage: \"Nom d'utilisateur ou mot de passe invalide. (ce message a été écrasé dans le thème)\"\r\n        /* spell-checker: enable */\r\n    }\r\n});\r\n\r\nexport type I18n = NonNullable<ReturnType<typeof useI18n>>;\r\n","export default \"__VITE_ASSET__BPYvPCPi__\"","// Copy pasted from: https://github.com/InseeFrLab/keycloakify/blob/main/src/login/Template.tsx\r\n\r\nimport { useEffect } from \"react\";\r\nimport { assert } from \"keycloakify/tools/assert\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { usePrepareTemplate } from \"keycloakify/lib/usePrepareTemplate\";\r\nimport { type TemplateProps } from \"keycloakify/login/TemplateProps\";\r\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\r\nimport type { KcContext } from \"./kcContext\";\r\nimport type { I18n } from \"./i18n\";\r\nimport confuturoLogoSvgUrl from \"./assets/img/logo.svg\";\r\n\r\nexport default function Template(props: TemplateProps<KcContext, I18n>) {\r\n    const {\r\n        displayInfo = false,\r\n        displayMessage = true,\r\n        displayRequiredFields = false,\r\n        displayWide = false,\r\n        showAnotherWayIfPresent = true,\r\n        // headerNode,\r\n        showUsernameNode = null,\r\n        infoNode = null,\r\n        kcContext,\r\n        i18n,\r\n        doUseDefaultCss,\r\n        classes,\r\n        children\r\n    } = props;\r\n\r\n    const { getClassName } = useGetClassName({ doUseDefaultCss, classes });\r\n    const { msg, changeLocale, labelBySupportedLanguageTag, currentLanguageTag } = i18n;\r\n    const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext;\r\n    const showLogin     : string = `Ingreso a ${ realm.displayNameHtml }`\r\n    const showSubtitle  : string = `Ingresa al portal con tus credenciales`\r\n    const { isReady } = usePrepareTemplate({\r\n        \"doFetchDefaultThemeResources\": doUseDefaultCss,\r\n        \"styles\": [\r\n            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly.min.css`,\r\n            `${url.resourcesCommonPath}/node_modules/patternfly/dist/css/patternfly-additions.min.css`,\r\n            `${url.resourcesCommonPath}/lib/zocial/zocial.css`,\r\n            `${url.resourcesPath}/css/login.css`\r\n        ],\r\n        \"htmlClassName\": getClassName(\"kcHtmlClass\"),\r\n        \"bodyClassName\": getClassName(\"kcBodyClass\"),\r\n        \"htmlLangProperty\": locale?.currentLanguageTag,\r\n        \"documentTitle\": i18n.msgStr(\"loginTitle\", kcContext.realm.displayName)\r\n    });\r\n    console.log({url})\r\n    useEffect(() => {\r\n        \r\n    }, []);\r\n\r\n    if (!isReady) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={getClassName(\"kcLoginClass\")}>\r\n            <div id=\"kc-header\" className={getClassName(\"kcHeaderClass\")}>\r\n                <div \r\n                    id=\"kc-header-wrapper\" \r\n                    className={getClassName(\"kcHeaderWrapperClass\")}\r\n                    style={{ \"fontFamily\": '\"Work Sans\"' }}\r\n                >\r\n                    <div className=\"header-brand\">\r\n                    <img src={confuturoLogoSvgUrl}\r\n                         className=\"header-brand-img logo-confuturo\"\r\n                         alt=\"confuturo-logo\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={clsx(getClassName(\"kcFormCardClass\"), displayWide && getClassName(\"kcFormCardAccountClass\"))}>\r\n                <header className={getClassName(\"kcFormHeaderClass\")}>\r\n                    {realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (\r\n                        <div id=\"kc-locale\">\r\n                            <div id=\"kc-locale-wrapper\" className={getClassName(\"kcLocaleWrapperClass\")}>\r\n                                <div className=\"kc-dropdown\" id=\"kc-locale-dropdown\">\r\n                                    <a href=\"#\" id=\"kc-current-locale-link\">\r\n                                        {labelBySupportedLanguageTag[currentLanguageTag]}\r\n                                    </a>\r\n                                    <ul>\r\n                                        {locale.supported.map(({ languageTag }) => (\r\n                                            <li key={languageTag} className=\"kc-dropdown-item\">\r\n                                                <a href=\"#\" onClick={() => changeLocale(languageTag)}>\r\n                                                    {labelBySupportedLanguageTag[languageTag]}\r\n                                                </a>\r\n                                            </li>\r\n                                        ))}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\r\n                        displayRequiredFields ? (\r\n                            <div className={getClassName(\"kcContentWrapperClass\")}>\r\n                                <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\r\n                                    <span className=\"subtitle\">\r\n                                        <span className=\"required\">*</span>\r\n                                        {msg(\"requiredFields\")}\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"col-md-10 center-head\">\r\n                                <h1 id=\"kc-page-title\">{showLogin}</h1>\r\n                                    <h3 id=\"kc-h3-subtitle\">{showSubtitle}</h3>\r\n                                </div>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"col-md-10 center-head\">\r\n                                <h1 id=\"kc-page-title\">{showLogin}</h1>\r\n                                <h3 id=\"kc-h3-subtitle\">{showSubtitle}</h3>\r\n                            </div>\r\n                        )\r\n                    ) : displayRequiredFields ? (\r\n                        <div className={getClassName(\"kcContentWrapperClass\")}>\r\n                            <div className={clsx(getClassName(\"kcLabelWrapperClass\"), \"subtitle\")}>\r\n                                <span className=\"subtitle\">\r\n                                    <span className=\"required\">*</span> {msg(\"requiredFields\")}\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"col-md-10\">\r\n                                {showUsernameNode}\r\n                                <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                    <div id=\"kc-username\">\r\n                                        <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\r\n                                        <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\r\n                                            <div className=\"kc-login-tooltip\">\r\n                                                <i className={getClassName(\"kcResetFlowIcon\")}></i>\r\n                                                <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\r\n                                            </div>\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ) : (\r\n                        <>\r\n                            {showUsernameNode}\r\n                            <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                <div id=\"kc-username\">\r\n                                    <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\r\n                                    <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\r\n                                        <div className=\"kc-login-tooltip\">\r\n                                            <i className={getClassName(\"kcResetFlowIcon\")}></i>\r\n                                            <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\r\n                                        </div>\r\n                                    </a>\r\n                                </div>\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </header>\r\n                <div id=\"kc-content\">\r\n                    <div id=\"kc-content-wrapper\">\r\n                        {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\r\n                        {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\r\n                            <div className={clsx(\"alert\", `alert-${message.type}`)}>\r\n                                {message.type === \"success\" && <span className={getClassName(\"kcFeedbackSuccessIcon\")}></span>}\r\n                                {message.type === \"warning\" && <span className={getClassName(\"kcFeedbackWarningIcon\")}></span>}\r\n                                {message.type === \"error\" && <span className={getClassName(\"kcFeedbackErrorIcon\")}></span>}\r\n                                {message.type === \"info\" && <span className={getClassName(\"kcFeedbackInfoIcon\")}></span>}\r\n                                <span\r\n                                    className=\"kc-feedback-text\"\r\n                                    dangerouslySetInnerHTML={{\r\n                                        \"__html\": message.summary\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                        {children}\r\n                        {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\r\n                            <form\r\n                                id=\"kc-select-try-another-way-form\"\r\n                                action={url.loginAction}\r\n                                method=\"post\"\r\n                                className={clsx(displayWide && getClassName(\"kcContentWrapperClass\"))}\r\n                            >\r\n                                <div\r\n                                    className={clsx(\r\n                                        displayWide && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\r\n                                    )}\r\n                                >\r\n                                    <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                        <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\" />\r\n                                        <a\r\n                                            href=\"#\"\r\n                                            id=\"try-another-way\"\r\n                                            onClick={() => {\r\n                                                document.forms[\"kc-select-try-another-way-form\" as never].submit();\r\n                                                return false;\r\n                                            }}\r\n                                        >\r\n                                            {msg(\"doTryAnotherWay\")}\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        )}\r\n                        {displayInfo && (\r\n                            <div id=\"kc-info\" className={getClassName(\"kcSignUpClass\")}>\r\n                                <div id=\"kc-info-wrapper\" className={getClassName(\"kcInfoAreaWrapperClass\")}>\r\n                                    {infoNode}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import \"./assets/css/KcApp.css\";\r\nimport { lazy, Suspense } from \"react\";\r\nimport Fallback, { type PageProps } from \"keycloakify/login\";\r\nimport type { KcContext } from \"./kcContext\";\r\nimport { useI18n } from \"./i18n\";\r\nimport Template from \"./Template\";\r\n\r\nconst Login = lazy(() => import(\"./pages/Login\"));\r\n// If you can, favor register-user-profile.ftl over register.ftl, see: https://docs.keycloakify.dev/realtime-input-validation\r\nconst Register = lazy(() => import(\"./pages/Register\"));\r\nconst RegisterUserProfile = lazy(() => import(\"./pages/RegisterUserProfile\"));\r\nconst Terms = lazy(() => import(\"./pages/Terms\"));\r\nconst MyExtraPage1 = lazy(() => import(\"./pages/MyExtraPage1\"));\r\nconst MyExtraPage2 = lazy(() => import(\"./pages/MyExtraPage2\"));\r\nconst Info = lazy(() => import(\"keycloakify/login/pages/Info\"));\r\n\r\n// This is like adding classes to theme.properties \r\n// https://github.com/keycloak/keycloak/blob/11.0.3/themes/src/main/resources/theme/keycloak/login/theme.properties\r\nconst classes = {\r\n    // NOTE: The classes are defined in ./KcApp.css\r\n    \"kcHtmlClass\": \"my-root-class\",\r\n    \"kcHeaderWrapperClass\": \"my-color my-font\"\r\n} satisfies PageProps[\"classes\"];\r\n\r\nexport default function KcApp(props: { kcContext: KcContext; }) {\r\n\r\n    const { kcContext } = props;\r\n\r\n    const i18n = useI18n({ kcContext });\r\n\r\n    if (i18n === null) {\r\n        //NOTE: Text resources for the current language are still being downloaded, we can't display anything yet.\r\n        //We could display a loading progress but it's usually a matter of milliseconds.\r\n        return null;\r\n    }\r\n\r\n    /* \r\n    * Examples assuming i18n.currentLanguageTag === \"en\":\r\n    * i18n.msg(\"access-denied\") === <span>Access denied</span>\r\n    * i18n.msg(\"foo\") === <span>foo in English</span>\r\n    */\r\n\r\n    return (\r\n        <Suspense>\r\n            {(() => {\r\n                switch (kcContext.pageId) {\r\n                    case \"login.ftl\": return <Login {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\r\n                    case \"register.ftl\": return <Register {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\r\n                    case \"register-user-profile.ftl\": return <RegisterUserProfile {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />\r\n                    case \"terms.ftl\": return <Terms {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\r\n                    // Removes those pages in you project. They are included to show you how to implement keycloak pages\r\n                    // that are not yes implemented by Keycloakify. \r\n                    // See: https://docs.keycloakify.dev/limitations#some-pages-still-have-the-default-theme.-why\r\n                    case \"my-extra-page-1.ftl\": return <MyExtraPage1 {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\r\n                    case \"my-extra-page-2.ftl\": return <MyExtraPage2 {...{ kcContext, i18n, Template, classes }} doUseDefaultCss={true} />;\r\n                    // We choose to use the default Template for the Info page and to download the theme resources.\r\n                    // This is just an example to show you what is possible. You likely don't want to keep this as is. \r\n                    case \"info.ftl\": return (\r\n                        <Info\r\n                            {...{ kcContext, i18n, classes }}\r\n                            Template={lazy(() => import(\"keycloakify/login/Template\"))}\r\n                            doUseDefaultCss={true}\r\n                        />\r\n                    );\r\n                    default: return <Fallback {...{ kcContext, i18n, classes }} Template={Template} doUseDefaultCss={true} />;\r\n                }\r\n            })()}\r\n        </Suspense>\r\n    );\r\n\r\n}\r\n"],"file":"assets/KcApp-BOvd83ym.js"}