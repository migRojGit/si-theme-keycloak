{"version":3,"file":"Login-BDyWXmFO.js","sources":["../../node_modules/react-rut-formatter/dist/rutUtils.js","../../node_modules/react-rut-formatter/dist/useRut.js","../../src/keycloak-theme/login/pages/Login.tsx"],"sourcesContent":["/**\n * Remueve los separadores de un número de RUT (como \".\" o \"-\").\n * @param rut RUT a limpiar\n * @returns El mismo RUT sin separadores (p. ej. 444444444)\n */\nexport var removeSeparators = function (rut) {\n    if (!rut) {\n        return \"\";\n    }\n    // Removemos cualquier carácter que no sea dígito o la letra K.\n    // Luego elimina cualquier instancia extra de la letra K\n    // (solo puede haber una al final de un RUT, si es que ese es su DV)\n    return rut.replace(/[^0-9kK]/g, \"\").replace(/[kK]{1,}$/, \"K\");\n};\n/**\n * Le da formato a un RUT, incluyendo separadores de miles. Adecuado para presentación.\n *\n * Por ejemplo, \"444444444\" o \"44444444-4\" se convierte en \"44.444.444-4\".\n * @param rut RUT a formatear\n * @returns El mismo RUT con formato XX.XXX.XXX-X\n */\nexport var prettifyRut = function (rut) {\n    if (!rut) {\n        return \"\";\n    }\n    var cleanRut = removeSeparators(rut);\n    // Tenemos una K que no esté al final del RUT?\n    if (cleanRut.slice(0, -1).toUpperCase().includes(\"K\")) {\n        return \"\";\n    }\n    // Separamos el RUT de su DV\n    var dv = cleanRut.charAt(cleanRut.length - 1).toUpperCase();\n    var rutWithoutDv = cleanRut.slice(0, -1).replace(/^0+/, \"\");\n    var formattedRut = rutWithoutDv\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n    // Si hay un sólo dígito de momento, lo dejamos con formato 0-X\n    // para que se vea más presentable mientras el usuario tipea el resto\n    if (formattedRut === \"\") {\n        return \"0-\" + dv;\n    }\n    return formattedRut + \"-\" + dv;\n};\n/**\n * Le da formato a un RUT, sin incluir separadores de miles. Adecuado para uso interndo de un programa.\n *\n * Por ejemplo, \"444444444\" o \"44444444-4\" se convierte en \"44444444-4\".\n * @param rut RUT a formatear\n * @returns El mismo RUT con formato XXXXXXXX-X\n */\nexport var formatRut = function (rut) {\n    if (!rut) {\n        return \"\";\n    }\n    var cleanRut = removeSeparators(rut);\n    // Tenemos una K que no esté al final del RUT?\n    if (cleanRut.slice(0, -1).toUpperCase().includes(\"K\")) {\n        return \"\";\n    }\n    // Separamos el RUT de su DV\n    var dv = cleanRut.charAt(cleanRut.length - 1).toUpperCase();\n    var rutWithoutDv = cleanRut.slice(0, -1).replace(/^0+/, \"\");\n    // Si hay un sólo dígito de momento, lo dejamos con formato 0-X\n    // para que se vea más presentable mientras el usuario tipea el resto\n    if (rutWithoutDv === \"\") {\n        return \"0-\" + dv;\n    }\n    return rutWithoutDv + \"-\" + dv;\n};\n/**\n * Calcula el dígito verificador (DV) de un RUT.\n * @param rut Rut a calcular\n * @returns Su dígito verificador\n */\nexport var calculateDv = function (rut) {\n    var rutArr = Math.abs(rut).toString().split(\"\");\n    var digits = rutArr.map(function (digit) { return parseInt(digit, 10); }).reverse();\n    var sum = digits.reduce(function (acc, digit, idx) {\n        var weightedDigit = digit * ((idx % 6) + 2);\n        return acc + weightedDigit;\n    }, 0);\n    var modulo = 11 - (sum % 11);\n    if (modulo === 11) {\n        return \"0\";\n    }\n    else if (modulo === 10) {\n        return \"K\";\n    }\n    else {\n        return modulo.toString();\n    }\n};\n/**\n * Comprueba si el dígito verificador de un RUT (con o sin formato) es válido.\n * @param rut RUT a comprobar\n * @returns Si el RUT tiene un dígito verificador válido\n */\nexport var checkRut = function (rut) {\n    if (!rut) {\n        return false;\n    }\n    // Limpiamos el RUT de caracteres innecesarios\n    var cleanRut = removeSeparators(rut);\n    // Un RUT debiera tener como mínimo tres caracteres (X-X)\n    if (cleanRut.length < 2) {\n        return false;\n    }\n    var rutWithoutDv = parseInt(cleanRut.slice(0, -1));\n    var dv = cleanRut.charAt(cleanRut.length - 1).toUpperCase();\n    return calculateDv(rutWithoutDv) === dv;\n};\n//# sourceMappingURL=rutUtils.js.map","import { useState } from \"react\";\nimport { prettifyRut, removeSeparators, calculateDv } from \"./rutUtils\";\n/**\n * Un _hook_ personalizado que facilita el trabajo con números de RUT.\n *\n * El _hook_ retorna lo siguiente:\n *   - `rut`: Objeto conteniendo:\n *     - `formatted`: Formateado de la forma XX.XXX.XXX-X\n *     - `raw`: Formateado \"en bruto\" (XXXXXXXX-X), adecuado para usar en\n *       registros o variables\n *   - `updateRut`: actualiza el RUT, para entregarlo formateado en `rut`\n *   - `isValid`: indica si el RUT tiene DV válido\n *\n * @returns Lo indicado arriba\n */\nexport var useRut = function () {\n    var _a = useState(null), rut = _a[0], setRut = _a[1];\n    var formattedRut = prettifyRut(rut);\n    var updateRut = function (rut) {\n        setRut(removeSeparators(rut));\n    };\n    var rutWithoutDv = formattedRut === null || formattedRut === void 0 ? void 0 : formattedRut.slice(0, -1).replace(/\\./g, \"\");\n    var dv = formattedRut.charAt(formattedRut.length - 1);\n    var isValid = rutWithoutDv !== \"\" &&\n        rutWithoutDv !== \"0-\" &&\n        dv === calculateDv(parseInt(rutWithoutDv));\n    return {\n        updateRut: updateRut,\n        rut: {\n            formatted: formattedRut !== \"0-0\" ? formattedRut : \"\",\n            raw: formattedRut !== \"0-0\" ? \"\" + rutWithoutDv + dv : \"\",\n        },\n        isValid: isValid,\n    };\n};\n//# sourceMappingURL=useRut.js.map","import React, { useEffect, useState, type FormEventHandler } from \"react\";\r\nimport { clsx } from \"keycloakify/tools/clsx\";\r\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\r\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\r\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\r\nimport type { KcContext } from \"../kcContext\";\r\nimport type { I18n } from \"../i18n\";\r\nimport { checkRut, useRut, formatRut } from \"react-rut-formatter\";\r\n\r\nconst my_custom_param = new URL(window.location.href).searchParams.get(\"my_custom_param\");\r\n// interface IndexRealm {\r\n//     [key: string]           : string,\r\n//     'confuturo-sso-qa'      : string,\r\n//     'confuturo-sso'         : string,\r\n//     'myrealm'               : string,\r\n//     'sitio-intermediario'   : string,\r\n// }\r\n/**VALIDAR CLIENTID en relación al reino PROD y QA */\r\n// interface indexClient {\r\n//     [key: string]   : string,\r\n//     'sitio-intermediario' : string,\r\n//     ''\r\n// }\r\n\r\nif (my_custom_param !== null) {\r\n    console.log(\"my_custom_param:\", my_custom_param);\r\n}\r\n\r\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\r\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\r\n    const { getClassName } = useGetClassName({\r\n        doUseDefaultCss,\r\n        classes\r\n    });\r\n    // const indexRealm: IndexRealm = {\r\n    //     'confuturo-sso-qa'      : 'https://sitio-intermediario-qa.confuturo.cl/recover-password',\r\n    //     'confuturo-sso'         : 'https://sitio-intermediario.confuturo.cl/recover-password',\r\n    //     'myrealm'               : 'https://sitio-intermediario-qa.confuturo.cl/recover-password',\r\n    //     'sitio-intermediario'   : 'https://sitio-intermediario-qa.confuturo.cl/recover-password',\r\n    // }\r\n    const { rut, updateRut } = useRut();\r\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\r\n    const { msg, msgStr } = i18n;\r\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(true);\r\n    const [isValidTaxId, setIsValidTaxId] = useState(false);\r\n    const [passValue, setPassValue] = useState(\"\");\r\n    console.log({ kcContext })\r\n    // const realmName: string = realm?.name ?? \"myRealm\";\r\n    // url.loginResetCredentialsUrl = indexRealm[realmName] \r\n    // console.log('sitio-intermediario',indexRealm)\r\n    // console.log({ kcContext })\r\n    // console.log(realmName)\r\n    const validateUsername = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>): void => {\r\n        const rutAux = formatRut(value)\r\n        updateRut(rutAux);\r\n       if (!checkRut(rutAux)) {\r\n        setIsValidTaxId(false);\r\n        setPassValue('');\r\n        return\r\n       }\r\n       setIsValidTaxId(true);\r\n    }\r\n\r\n    const passwordValidate = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n       const passAux = event.target.value\r\n       setPassValue(passAux);\r\n       validateProps()\r\n    }\r\n\r\n    const validateProps = (): void => {\r\n        const result = isValidTaxId && passValue.length > 4 ? false : true;\r\n        setIsLoginButtonDisabled(result);\r\n    }\r\n\r\n    useEffect(() => {\r\n        validateProps();\r\n    }, [isValidTaxId, passValue])\r\n\r\n   \r\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {        \r\n        e.preventDefault();\r\n        setIsLoginButtonDisabled(true);\r\n\r\n        const formElement = e.target as HTMLFormElement;\r\n\r\n        //NOTE: Even if we login with email Keycloak expect username and password in\r\n        //the POST request.\r\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\r\n\r\n        formElement.submit();\r\n    });\r\n\r\n    const changeLabelText = (label: any) => {\r\n        return label === 'usernameOrEmail' || label === 'username' ? 'Ingresa tu RUT' : msg(label)\r\n    }\r\n\r\n    return (\r\n        <Template\r\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\r\n            displayInfo={\r\n                realm.password &&\r\n                realm.registrationAllowed &&\r\n                !registrationDisabled\r\n            }\r\n            displayWide={realm.password && social.providers !== undefined}\r\n            headerNode={msg(\"doLogIn\")}\r\n            infoNode={\r\n                <div id=\"kc-registration\">\r\n                    <span>\r\n                        {msg(\"noAccount\")}\r\n                        <a tabIndex={6} href={url.registrationUrl}>\r\n                            {msg(\"doRegister\")}\r\n                        </a>\r\n                    </span>\r\n                </div>\r\n            }\r\n        >\r\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\r\n                <div\r\n                    id=\"kc-form-wrapper\"\r\n                    className={clsx(\r\n                        realm.password &&\r\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\r\n                    )}\r\n                >\r\n                    {realm.password && (\r\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\r\n                            <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                {!usernameHidden &&\r\n                                    (() => {\r\n                                        const label = !realm.loginWithEmailAllowed\r\n                                            ? \"username\"\r\n                                            : realm.registrationEmailAsUsername\r\n                                                ? \"email\"\r\n                                                : \"usernameOrEmail\";\r\n\r\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\r\n\r\n                                        return (\r\n                                            <>\r\n                                                <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\r\n                                                    {changeLabelText(label)}\r\n                                                </label>\r\n                                                <input\r\n                                                    tabIndex={1}\r\n                                                    id={autoCompleteHelper}\r\n                                                    className={getClassName(\"kcInputClass\")}\r\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\r\n                                                    //the browser how to pre fill the form but before submit we put it back\r\n                                                    //to username because it is what keycloak expects.\r\n                                                    name={autoCompleteHelper}\r\n                                                    value={rut.formatted}\r\n                                                    onChange={validateUsername}\r\n                                                    type=\"text\"\r\n                                                    autoFocus={true}\r\n                                                    autoComplete=\"off\"\r\n                                                    maxLength={12}\r\n                                                />\r\n                                            </>\r\n                                        );\r\n                                    })()}\r\n                            </div>\r\n                            <div className={getClassName(\"kcFormGroupClass\")}>\r\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\r\n                                    {msg(\"password\")}\r\n                                </label>\r\n                                <input\r\n                                    tabIndex={2}\r\n                                    id=\"password\"\r\n                                    className={getClassName(\"kcInputClass\")}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    autoComplete=\"off\"\r\n                                    maxLength={20}\r\n                                    disabled={!checkRut(rut.formatted)}\r\n                                    onChange={ e => passwordValidate(e) }\r\n                                    value={passValue}\r\n                                />\r\n                            </div>\r\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\r\n                                <div id=\"kc-form-options\">\r\n                                    {realm.rememberMe && !usernameHidden && (\r\n                                        <div className=\"checkbox\">\r\n                                            <label>\r\n                                                <input\r\n                                                    tabIndex={3}\r\n                                                    id=\"rememberMe\"\r\n                                                    name=\"rememberMe\"\r\n                                                    type=\"checkbox\"\r\n                                                    {...(login.rememberMe === \"on\"\r\n                                                        ? {\r\n                                                            \"checked\": true\r\n                                                        }\r\n                                                        : {})}\r\n                                                />\r\n                                                {msg(\"rememberMe\")}\r\n                                            </label>\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\r\n                                    {realm.resetPasswordAllowed && (\r\n                                        <span>\r\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\r\n                                                {msg(\"doForgotPassword\")}\r\n                                            </a>\r\n                                        </span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\r\n                                <input\r\n                                    type=\"hidden\"\r\n                                    id=\"id-hidden-input\"\r\n                                    name=\"credentialId\"\r\n                                    {...(auth?.selectedCredential !== undefined\r\n                                        ? {\r\n                                            \"value\": auth.selectedCredential\r\n                                        }\r\n                                        : {})}\r\n                                />\r\n                                <input\r\n                                    tabIndex={4}\r\n                                    className={clsx(\r\n                                        getClassName(\"kcButtonClass\"),\r\n                                        getClassName(\"kcButtonPrimaryClass\"),\r\n                                        getClassName(\"kcButtonBlockClass\"),\r\n                                        getClassName(\"kcButtonLargeClass\")\r\n                                    )}\r\n                                    name=\"login\"\r\n                                    id=\"kc-login\"\r\n                                    type=\"submit\"\r\n                                    value={msgStr(\"doLogIn\")}\r\n                                    disabled={ isLoginButtonDisabled }\r\n                                />\r\n                            </div>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n                {realm.password && social.providers !== undefined && (\r\n                    <div\r\n                        id=\"kc-social-providers\"\r\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\r\n                    >\r\n                        <ul\r\n                            className={clsx(\r\n                                getClassName(\"kcFormSocialAccountListClass\"),\r\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\r\n                            )}\r\n                        >\r\n                            {social.providers.map((p) => (\r\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\r\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\r\n                                        <span>{p.displayName}</span>\r\n                                    </a>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </Template>\r\n    );\r\n}\r\n"],"names":["removeSeparators","rut","prettifyRut","cleanRut","dv","rutWithoutDv","formattedRut","formatRut","calculateDv","rutArr","digits","digit","sum","acc","idx","weightedDigit","modulo","checkRut","useRut","_a","useState","setRut","updateRut","isValid","my_custom_param","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","isValidTaxId","setIsValidTaxId","passValue","setPassValue","validateUsername","value","rutAux","passwordValidate","event","passAux","validateProps","result","useEffect","onSubmit","useConstCallback","e","formElement","changeLabelText","label","jsx","jsxs","clsx","autoCompleteHelper","Fragment","p"],"mappings":"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","x_google_ignoreList":[0,1]}